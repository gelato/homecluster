---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: victoria-metrics-stack
  namespace: observability
spec:
  interval: 30m
  chart:
    spec:
      chart: victoria-metrics-k8s-stack
      version: 0.23.2
      sourceRef:
        kind: HelmRepository
        name: victoriametrics-charts
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    fullnameOverride: victoria-metrics

    # VM Operator deployment
    victoria-metrics-operator:
      enabled: true
      operator:
        disable_prometheus_converter: false # Ensure we keep enabled the converter to sync prom rules to VM rules
        enable_converter_ownership: true # Required to allow VM to remove VM rules it imports if a prometheus rule is deleted
    serviceAccount:
      # -- Specifies whether a service account should be created
      create: true
    # Main VM Cluster in HA mode.
    vmcluster:
      enabled: true
      spec:
        # Duration to keep metrics
        retentionPeriod: "2" # this is months unless a character prefix is added (1d, 1w, etc)
        extraArgs:
          dedup.minScrapeInterval: "60s" # Only needed for HA
        replicationFactor: 3
        # Storage backend
        vmstorage:
          replicaCount: 3 # HA - but prefer 3 as i have 3 notes & using local-hostpath
          # required for HA vmagents
          extraArgs:
            dedup.minScrapeInterval: 60s # Only needed for HA
            search.maxConcurrentRequests: "6"
          storage:
            volumeClaimTemplate:
              spec:
                storageClassName: longhorn-fast
                resources:
                  requests:
                    storage: 10Gi
        # Query backend
        vmselect:
          replicaCount: 2 # HA
          cacheMountPath: /select-cache
          extraArgs:
            dedup.minScrapeInterval: "60s" # should be equal to VMAgent's scrapeInterval (default 30s)
            search.minStalenessInterval: "5m"
            search.maxConcurrentRequests: "6"
            vmalert.proxyURL: "http://vmalert.${secret_DOMAIN}"
          storage:
            volumeClaimTemplate:
              spec:
                storageClassName: longhorn-fast
                resources:
                  requests:
                    storage: 2Gi
        # Data ingestion backend
        vminsert:
          replicaCount: 2 # HA
          extraArgs:
            maxLabelsPerTimeseries: "90" # More needed if you are scraping a LOT of stuff and having issues
            # insert.maxConcurrentRequests: 10
          resources:
            requests:
              cpu: 105m
              memory: 300Mi
            limits:
              memory: 600Mi
      ingress:
        storage:
          enabled: true
          ingressClassName: internal
          hosts:
            - &hoststorage vmstorage.${SECRET_DOMAIN}
          tls:
            - hosts:
                - *hoststorage

        select:
          enabled: true
          ingressClassName: internal
          hosts:
            - &hostselect vmselect.${SECRET_DOMAIN}
          tls:
            - hosts:
                - *hostselect

        insert:
          enabled: true
          ingressClassName: internal
          hosts:
            - &hostinsert vminsert.${SECRET_DOMAIN}
          tls:
            - hosts:
                - *hostinsert
    # VM Alerting (however, this just watches & passes alerts to prom-alertmanager below...)
    vmalert:
      enabled: true
      spec:
        replicaCount: 2 # HA
        evaluationInterval: "60s"
        notifiers:
          - selector:
              namespaceSelector:
                matchNames: ["observability"]
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: victoria-metrics-k8s-stack
      ingress:
        enabled: true
        ingressClassName: internal
        hosts:
          - &hostalert vmalert.${SECRET_DOMAIN}
        tls:
          - hosts:
              - *hostalert

    # VM Data scraping
    vmagent:
      enabled: true
      spec:
        replicaCount: 1
        shardCount: 2
        scrapeInterval: "60s"
        additionalScrapeConfigs:
          name: vm-additional-scrape-configs
          key: prometheus-additional.yaml

      ingress:
        enabled: true
        ingressClassName: internal
        annotations:
          nginx.ingress.kubernetes.io/auth-url: |-
            http://ak-outpost-authentik-embedded-outpost.security.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
          nginx.ingress.kubernetes.io/auth-signin: |-
            https://vmagent.${SECRET_DOMAIN}/outpost.goauthentik.io/start?rd=$escaped_request_uri
          nginx.ingress.kubernetes.io/auth-response-headers: |-
            Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
          nginx.ingress.kubernetes.io/auth-snippet: |
            proxy_set_header X-Forwarded-Host $http_host;
        hosts:
          - &hostagent vmagent.${SECRET_DOMAIN}
        tls:
          - hosts:
              - *hostagent
    # Single-binary vm cluster alternative (liteweight, non-HA)
    vmsingle:
      enabled: false

    # Extra slack templates
    monzoTemplate:
      enabled: false

    # Prepared sets of default rules
    # Adjust to what scraping functions you have enabled
    # i.e. if you dont have kubeapisever setup & enabled, disable
    #   the kubeApiserver rules below
    defaultRules:
      create: true
      rules:
        etcd: true
        general: true
        k8s: true
        kubeApiserver: true
        kubeApiserverAvailability: true
        kubeApiserverBurnrate: true
        kubeApiserverHistogram: true
        kubeApiserverSlos: true
        kubelet: true
        kubePrometheusGeneral: true
        kubePrometheusNodeRecording: true
        kubernetesApps: true
        kubernetesResources: true
        kubernetesStorage: true
        kubernetesSystem: true
        kubeScheduler: true
        kubeStateMetrics: true
        network: true
        node: true
        vmagent: true
        vmsingle: true
        vmhealth: true
        alertmanager: true

    # Prometheus alertmanager spinup
    # Wait, why are we using vmalert AND prometheus alertmanager???
    # VMalert isnt fully featured and VM acknowledge its a favourite
    # for example,
    alertmanager:
      enabled: true

      ingress:
        enabled: true
        ingressClassName: internal
        hosts:
          - &hostam alertmanager.${SECRET_DOMAIN}
        tls:
          - hosts:
              - *hostam
      spec:
        externalURL: https://alertmanager.${SECRET_DOMAIN}
        replicaCount: 2
        # Import Alertmanager config from a existing secret
        # this can be configured directly in chart but it can
        #   be a bit unweildy to manage
        configSecret: alertmanager-secret
        # I needed this for talos using local-hostpath - YMMV
        #
        securityContext:
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
          fsGroup: 2000
          seccompProfile:
            type: RuntimeDefault

        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn-fast
              resources:
                requests:
                  storage: 50Mi

    # Add Kubelet scrape
    kubelet:
      enabled: true
      # -- Enable scraping /metrics/cadvisor from kubelet's service
      cadvisor: true
      # -- Enable scraping /metrics/probes from kubelet's service
      probes: true
      # spec for VMNodeScrape crd
      # https://docs.victoriametrics.com/operator/api.html#vmnodescrapespec
      spec:
        scheme: "https"
        honorLabels: true
        interval: "30s"
        scrapeTimeout: "5s"
        tlsConfig:
          insecureSkipVerify: true
          caFile: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        bearerTokenFile: "/var/run/secrets/kubernetes.io/serviceaccount/token"
        metricRelabelConfigs:
          # Drop high cardinality labels
          - action: labeldrop
            regex: (uid)
          - action: labeldrop
            regex: (id|name)
          - action: drop
            source_labels: ["__name__"]
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)
        relabelConfigs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - sourceLabels: [__metrics_path__]
            targetLabel: metrics_path
          - targetLabel: "job"
            replacement: "kubelet"
        # ignore timestamps of cadvisor's metrics by default
        # more info here https://github.com/VictoriaMetrics/VictoriaMetrics/issues/4697#issuecomment-1656540535
        honorTimestamps: false

    # Add Kubeapi scrape
    kubeApiServer:
      enabled: true
      spec:
        endpoints:
          - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
            # bearerTokenSecret:
            #   key: ""
            port: https
            scheme: https
            tlsConfig:
              caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              serverName: localhost
        jobLabel: apiserver
        namespaceSelector:
          matchNames:
            - kube-system
            - default
        selector:
          matchLabels:
            component: apiserver
            provider: kubernetes
        metricRelabelConfigs:
          # Remove high cardinality metrics
          - sourceLabels: ["__name__"]
            regex: (etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
            action: drop
          - sourceLabels: ["__name__"]
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
            action: drop

    # Add kubeControllerManager scrape
    kubeControllerManager:
      enabled: true
      endpoints: &cp
        - 192.168.108.149
        - 192.168.108.209
        - 192.168.108.238
      service:
        enabled: true
        port: 10259
        targetPort: 10259
      spec:
        jobLabel: kube-controller-manager
        endpoints:
          - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
            # bearerTokenSecret:
            #   key: ""
            port: http-metrics
            scheme: https
            tlsConfig:
              caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              serverName: localhost
              insecureSkipVerify: true

  # -- Component scraping coreDns. Use either this or kubeDns
    coreDns:
      enabled: true
      service:
        enabled: true
        port: 9153
        targetPort: 9153
        selector:
          k8s-app: kube-dns
      # spec for VMServiceScrape crd
      # https://docs.victoriametrics.com/operator/api.html#vmservicescrapespec
      spec:
        jobLabel: kube-dns
        endpoints:
          - port: http-metrics
            bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token

    # Add kubeScheduler scrape
    kubeScheduler:
      enabled: false
      endpoints: *cp
      service:
        enabled: true
        port: 10259
        targetPort: 10259

      spec:
        endpoints:
          - port: http-metrics
            insecureSkipVerify: true

    kubeProxy:
      enabled: false # Disabled because eBPF

    # Add kubeEtcd scrape
    kubeEtcd:
      enabled: true
      endpoints: *cp
      service:
        enabled: true
        port: 2381
        targetPort: 2381
      spec:
        endpoints:
          - port: http-metrics
            scheme: http

    # Enable deployment of kube state metrics contianers
    # I chose to deploy these seperately and manage it myself
    #   insetad of trusting the stack chart
    kube-state-metrics:
      enabled: false

    # Enable deployment of prom-note-exporter contianers
    # I chose to deploy these seperately and manage it myself
    #   insetad of trusting the stack chart
    prometheus-node-exporter:
      enabled: false

    # Enable deployment of grafana
    # I chose to deploy this seperately and manage it myself
    #   insetad of trusting the stack chart
    grafana:
      enabled: false